r4 <- c(4, 0.2984293, 0.3115183)
results <- rbind(results, r4)
r3 <- c(3, 0.2984293, 0.2984293)
results <- rbind(results, r3)
r2 <- c(2, 0.2984293, 0.2984293)
results <- rbind(results, r2)
r1 <- c(2, 0.2984293, 0.2984293)
results <- rbind(results, r1)
results
results
r11 <- c(11, 0.2172775, 0.2356021)
results <- matrix(r11, 1)
r10 <- c(10, 0.2251309, 0.2329843)
results <- rbind(results, r10)
r9 <- c(9, 0.2303665, 0.2329843)
results <- rbind(results, r9)
r8 <- c(8, 0.2905759, 0.3062827)
results <- rbind(results, r8)
r7 <- c(7, 0.2853403, 0.2984293)
results <- rbind(results, r7)
r6 <- c(6, 0.2905759, 0.2958115)
results <- rbind(results, r6)
r5 <- c(5, 0.2984293, 0.3036649)
results <- rbind(results, r5)
r4 <- c(4, 0.2984293, 0.3115183)
results <- rbind(results, r4)
r3 <- c(3, 0.2984293, 0.2984293)
results <- rbind(results, r3)
r2 <- c(2, 0.2984293, 0.2984293)
results <- rbind(results, r2)
r1 <- c(1, 0.2984293, 0.2984293)
results <- rbind(results, r1)
colnames(results)[1] <- c("Number of variables")
results
r11 <- c(11, 0.2172775, 0.2356021)
results <- matrix(r11, 1)
r10 <- c(10, 0.2251309, 0.2329843)
results <- rbind(results, r10)
r9 <- c(9, 0.2303665, 0.2329843)
results <- rbind(results, r9)
r8 <- c(8, 0.2905759, 0.3062827)
results <- rbind(results, r8)
r7 <- c(7, 0.2853403, 0.2984293)
results <- rbind(results, r7)
r6 <- c(6, 0.2905759, 0.2958115)
results <- rbind(results, r6)
r5 <- c(5, 0.2984293, 0.3036649)
results <- rbind(results, r5)
r4 <- c(4, 0.2984293, 0.3115183)
results <- rbind(results, r4)
r3 <- c(3, 0.2984293, 0.2984293)
results <- rbind(results, r3)
r2 <- c(2, 0.2984293, 0.2984293)
results <- rbind(results, r2)
r1 <- c(1, 0.2984293, 0.2984293)
results <- rbind(results, r1)
colnames(results)[1] <- c("Number of variables")
View(results)
r11 <- c(11, 0.2172775, 0.2356021)
results <- matrix(r11, 1)
r10 <- c(10, 0.2251309, 0.2329843)
results <- rbind(results, r10)
r9 <- c(9, 0.2303665, 0.2329843)
results <- rbind(results, r9)
r8 <- c(8, 0.2905759, 0.3062827)
results <- rbind(results, r8)
r7 <- c(7, 0.2853403, 0.2984293)
results <- rbind(results, r7)
r6 <- c(6, 0.2905759, 0.2958115)
results <- rbind(results, r6)
r5 <- c(5, 0.2984293, 0.3036649)
results <- rbind(results, r5)
r4 <- c(4, 0.2984293, 0.3115183)
results <- rbind(results, r4)
r3 <- c(3, 0.2984293, 0.2984293)
results <- rbind(results, r3)
r2 <- c(2, 0.2984293, 0.2984293)
results <- rbind(results, r2)
r1 <- c(1, 0.2984293, 0.2984293)
results <- rbind(results, r1)
resultsFrame <- data.frame(results)
resultsFrame
r11 <- c(11, 0.2172775, 0.2356021)
results <- matrix(r11, 1)
r10 <- c(10, 0.2251309, 0.2329843)
results <- rbind(results, r10)
r9 <- c(9, 0.2303665, 0.2329843)
results <- rbind(results, r9)
r8 <- c(8, 0.2905759, 0.3062827)
results <- rbind(results, r8)
r7 <- c(7, 0.2853403, 0.2984293)
results <- rbind(results, r7)
r6 <- c(6, 0.2905759, 0.2958115)
results <- rbind(results, r6)
r5 <- c(5, 0.2984293, 0.3036649)
results <- rbind(results, r5)
r4 <- c(4, 0.2984293, 0.3115183)
results <- rbind(results, r4)
r3 <- c(3, 0.2984293, 0.2984293)
results <- rbind(results, r3)
r2 <- c(2, 0.2984293, 0.2984293)
results <- rbind(results, r2)
r1 <- c(1, 0.2984293, 0.2984293)
results <- rbind(results, r1)
resultsFrame <- data.frame(results)
colnames(resultsFrame) <- c("Number of variables", "training error", "testing error")
resultsFrame
resultsFrame
ggplot(data=dat1, aes(x=numbVar, y=numbVar)) +
geom_line() +
geom_point()
resultsFrame
ggplot(data=resultsFrame, aes(x=numbVar, y=numbVar)) +
geom_line() +
geom_point()
r11 <- c(11, 0.2172775, 0.2356021)
results <- matrix(r11, 1)
r10 <- c(10, 0.2251309, 0.2329843)
results <- rbind(results, r10)
r9 <- c(9, 0.2303665, 0.2329843)
results <- rbind(results, r9)
r8 <- c(8, 0.2905759, 0.3062827)
results <- rbind(results, r8)
r7 <- c(7, 0.2853403, 0.2984293)
results <- rbind(results, r7)
r6 <- c(6, 0.2905759, 0.2958115)
results <- rbind(results, r6)
r5 <- c(5, 0.2984293, 0.3036649)
results <- rbind(results, r5)
r4 <- c(4, 0.2984293, 0.3115183)
results <- rbind(results, r4)
r3 <- c(3, 0.2984293, 0.2984293)
results <- rbind(results, r3)
r2 <- c(2, 0.2984293, 0.2984293)
results <- rbind(results, r2)
r1 <- c(1, 0.2984293, 0.2984293)
results <- rbind(results, r1)
resultsFrame <- data.frame(results)
colnames(resultsFrame) <- c("numbVar", "trainingError", "testingError")
resultsFrame
ggplot(data=resultsFrame, aes(x=numbVar, y=numbVar)) +
geom_line() +
geom_point()
resultsFrame
ggplot(data=resultsFrame, aes(x=numbVar, y=trainingError)) +
geom_line() +
geom_point()
resultsFrame
ggplot(data=resultsFrame, aes(x=numbVar)) +
geom_line(aes(y=trainingError, colour = "black")) +
geom_line(aes(y=testingError, colour = "red")) +
geom_point()
resultsFrame
ggplot(data=resultsFrame, aes(x=numbVar)) +
geom_line(aes(y=trainingError, colour = "black")) +
geom_line(aes(y=testingError, colour = "red")) +
geom_point(aes(y=testingError)
resultsFrame
ggplot(data=resultsFrame, aes(x=numbVar)) +
geom_line(aes(y=trainingError, colour = "black")) +
geom_line(aes(y=testingError, colour = "red")) +
geom_point(aes(y=testingError))
resultsFrame
ggplot(data=resultsFrame, aes(x=numbVar)) +
geom_line(aes(y=trainingError, colour = "blue")) +
geom_line(aes(y=testingError, colour = "red")) +
geom_point(aes(y=testingError))
resultsFrame
ggplot(data=resultsFrame, aes(x=numbVar)) +
geom_line(aes(y=trainingError)) +
geom_line(aes(y=testingError)) +
geom_point(aes(y=testingError))
resultsFrame
ggplot(data=resultsFrame, aes(x=numbVar)) +
geom_line(aes(y=trainingError), colour="blue") +
geom_line(aes(y=testingError)) +
geom_point(aes(y=testingError))
resultsFrame
ggplot(data=resultsFrame, aes(x=numbVar)) +
geom_line(aes(y=trainingError), colour="blue") +
geom_line(aes(y=testingError), colour="red") +
geom_point(aes(y=testingError))
resultsFrame
ggplot(data=resultsFrame, aes(x=numbVar)) +
geom_line(aes(y=trainingError), colour="blue") +
geom_line(aes(y=testingError), colour="red") +
geom_point(aes(y=testingError), colour="red")
resultsFrame
ggplot(data=resultsFrame, aes(x=numbVar)) +
geom_line(aes(y=trainingError), colour="blue") +
geom_line(aes(y=testingError), colour="red") +
geom_point(aes(y=testingError), colour="red") +
geom_point(aes(y=trainingError), colour="blue")
resultsFrame
ggplot(data=resultsFrame, aes(x=numbVar)) +
geom_line(aes(y=trainingError), colour="blue") +
geom_line(aes(y=testingError), colour="red") +
geom_point(aes(y=testingError), colour="red") +
geom_point(aes(y=trainingError), colour="blue") +
ggtitle("Training and testing error with number of variables")
resultsFrame
ggplot(data=resultsFrame, aes(x=numbVar)) +
geom_line(aes(y=trainingError), colour="blue") +
geom_line(aes(y=testingError), colour="red") +
geom_point(aes(y=testingError), colour="red") +
geom_point(aes(y=trainingError), colour="blue") +
ggtitle("Training and testing error with number of variables") +
labs(y = "Value")
resultsFrame
ggplot(data=resultsFrame, aes(x=numbVar)) +
geom_line(aes(y=trainingError), colour="blue") +
geom_line(aes(y=testingError), colour="red") +
geom_point(aes(y=testingError), colour="red") +
geom_point(aes(y=trainingError), colour="blue") +
ggtitle("Training and testing error with number of variables") +
labs(y = "Value", x = "Number of variables")
resultsFrame
ggplot(data=resultsFrame, aes(x=numbVar)) +
geom_line(aes(y=trainingError), colour="blue") +
geom_line(aes(y=testingError), colour="red") +
geom_point(aes(y=testingError), colour="red") +
geom_point(aes(y=trainingError), colour="blue") +
ggtitle("Training and testing error with number of variables") +
labs(y = "Value", x = "Number of variables", caption = "Blue:     training error, Red: testing error")
resultsFrame
ggplot(data=resultsFrame, aes(x=numbVar)) +
geom_line(aes(y=trainingError), colour="blue") +
geom_line(aes(y=testingError), colour="red") +
geom_point(aes(y=testingError), colour="red") +
geom_point(aes(y=trainingError), colour="blue") +
ggtitle("Training and testing error with number of variables") +
labs(y = "Value", x = "Number of variables", caption = "Blues is for training error and red for testing error")
resultsFrame
ggplot(data=resultsFrame, aes(x=numbVar)) +
geom_line(aes(y=trainingError), colour="blue") +
geom_line(aes(y=testingError), colour="red") +
geom_point(aes(y=testingError), colour="red") +
geom_point(aes(y=trainingError), colour="blue") +
ggtitle("Training and testing error with number of variables") +
labs(y = "Value", x = "Number of variables", caption = "Blues is for training error and red for testing error")
?rnorm
tuloksetX <- rnorm(n = 1000, mean = 2238.83)
tuloksetX <- rnorm(n = 1000, mean = 2238.83, sd = 420.493)
tuloksetY <- rnorm(n= 1000, mean = 1904.93, sd = 306.068)
tuloksetX
plot(tuloksetX, tuloksetY)
tuloksetX <- rnorm(n = 1000, mean = 2238.83, sd = 400)
tuloksetY <- rnorm(n= 1000, mean = 1904.93, sd = 300)
plot(tuloksetX, tuloksetY)
tuloksetX <- rnorm(n = 1000, mean = 2238.83, sd = 4)
tuloksetY <- rnorm(n= 1000, mean = 1904.93, sd = 3)
plot(tuloksetX, tuloksetY)
tuloksetX <- rnorm(n = 1000, mean = 2238.83, sd = 400)
tuloksetY <- rnorm(n= 1000, mean = 1904.93, sd = 300)
plot(tuloksetX, tuloksetY)
data("Boston")
summary(Boston)
library(MASS)
library(corrplot)
install.packages()
install.packages("corrplot")
library(MASS)
library(corrplot)
library(tidyverse)
install.packages("tidyverse")
library(MASS)
library(corrplot)
library(tidyverse)
library(tidyr)
library(dplyr)
data("Boston")
summary(Boston)
str(Boston)
pairs(Boston)
cor_matrix<-cor(Boston)
cor_matrix %>% round(digits = 2)
corrplot(cor_matrix, method="square", type="lower", cl.pos = "r", tl.pos = "d", tl.cex = 0.6, tl.col="black")
data("Boston")
cor_matrix<-cor(Boston)
cor_matrix %>% round(digits = 2)
summary(Boston)
str(Boston)
pairs(Boston)
corrplot(cor_matrix, method="square", type="lower", cl.pos = "r", tl.pos = "d", tl.cex = 0.6, tl.col="black")
summary(Boston)
str(Boston)
pairs(Boston)
corrplot(cor_matrix, method="square", type="lower", cl.pos = "b", tl.pos = "d", tl.cex = 0.6, tl.col="black")
summary(Boston)
str(Boston)
pairs(Boston)
corrplot(cor_matrix, method="circle", type="lower", cl.pos = "r", tl.pos = "d", tl.cex = 0.6, tl.col="black")
summary(Boston)
str(Boston)
pairs(Boston)
corrplot(cor_matrix, method="circle", type="lower", cl.pos = "r", tl.pos = "d", tl.cex = 0.6, tl.col="black")
data_scaled <- scale(Boston)
summary(data_scaled)
class(data_scaled)
data_scaled <- as.data.frame(data_scaled)
crim_scaled <- data_scaled$crim
summary(crim_scaled)
bins <- quantile(crim_scaled)
print(bins)
crime <- cut(crim_scaled, breaks = bins, include.lowest = TRUE, labels=c("low", "med_low", "med_high", "high"))
table(crime)
data_scaled <- dplyr::select(data_scaled, -crim)
data_scaled <- data.frame(data_scaled, crime)
crim_scaled <- data_scaled$crim
summary(crim_scaled)
bins <- quantile(crim_scaled)
crim_scaled <- data_scaled$crim
summary(crim_scaled)
bins <- quantile(crim_scaled)
crim_scaled <- data_scaled$crim
summary(crim_scaled)
bins <- quantile(crim_scaled)
n <- nrow(data_scaled)
ind <- sample(n,  size = n * 0.8)
train <- data_scaled[ind,]
test <- data_scaled[-ind,]
correct_classes <- test$crime
test <- dplyr::select(test, -crime)
lda.fit <- lda(crime ~ ., data_scaled = train)
lda.fit <- lda(crime ~ ., data = train)
lda.fit
lda.arrows <- function(x, myscale = 1, arrow_heads = 0.1, color = "red", tex = 0.75, choices = c(1,2)){
heads <- coef(x)
arrows(x0 = 0, y0 = 0,
x1 = myscale * heads[,choices[1]],
y1 = myscale * heads[,choices[2]], col=color, length = arrow_heads)
text(myscale * heads[,choices], labels = row.names(heads),
cex = tex, col=color, pos=3)
}
classes <- as.numeric(train$crime)
plot(lda.fit, dimen = 2, col = classes, pch = classes)
lda.arrows(lda.fit, myscale = 1)
crim_scaled <- data_scaled$crim
summary(crim_scaled)
bins <- quantile(crim_scaled)
correct_classes <- test$crime
test <- dplyr::select(test, -crime)
lda.pred <- predict(lda.fit, newdata = test)
table(correct = correct_classes, predicted = lda.pred$class)
data("Boston")
data_scaled <- scale(Boston)
data_scaled <- as.data.frame(data_scaled)
dist_eu <- dist(Boston)
dist_eu <- dist(Boston)
dist_eu <- dist(Boston)
summary(dist_eu)
km <-kmeans(dist_eu, centers = 4)
pairs(Boston, col = km$cluster)
set.seed(123)
k_max <- 10
twcss <- sapply(1:k_max, function(k){kmeans(dist_eu, k)$tot.withinss})
plot(1:k_max, twcss, type='b')
km <-kmeans(dist_eu, centers = 2)
pairs(Boston, col = km$cluster)
set.seed(123)
k_max <- 10
twcss <- sapply(1:k_max, function(k){kmeans(dist_eu, k)$tot.withinss})
plot(1:k_max, twcss, type='b')
km <-kmeans(dist_eu, centers = 2)
pairs(Boston, col = km$cluster)
km
km
km <-kmeans(dist_eu, centers = 2)
pairs(Boston, col = km$cluster)
with(Boston, pairs(dat, col=c(1:3)[km$cluster]))
with(Boston, pairs(Boston, col=c(1:3)[km$cluster]))
pairs(Boston, col = km$cluster[1])
pairs(Boston, col = km$cluster)
?pairs
km <-kmeans(dist_eu, centers = 2)
pairs(Boston, col = km$cluster, upper.panel = NULL)
km <-kmeans(dist_eu, centers = 2)
pairs(Boston, col = km$cluster)
km <-kmeans(dist_eu, centers = 3)
lda.fit <- lda(km ~ ., data = train)
km <-kmeans(dist_eu, centers = 3)
km
km$centers
data_scaled <- data.frame(data_scaled, km$centers)
data_scaled
nrow(data_scaled)
nrow(km$centers)
ncol(km$centers)
?data.frame
data_scaled <- data.frame(data_scaled)
data_scaled$centers <- km$centers
?cbind
data_scaled <- cbind(data_scaled, km$centers)
km$centers
class(km$centers)
data_scaled <- cbind(data_scaled, t(km$centers))
data_scaled <- cbind(data_scaled, t(km$centers)[1,])
means <- t(km$centers)
View(means)
data_scaled <- data.frame(data_scaled)
km
hd <- read.csv("http://s3.amazonaws.com/assets.datacamp.com/production/course_2218/datasets/human_development.csv", stringsAsFactors = F)
gii <- read.csv("http://s3.amazonaws.com/assets.datacamp.com/production/course_2218/datasets/gender_inequality.csv", stringsAsFactors = F, na.strings = "..")
str(hd)
str(gii)
dim(hd)
head(hd)
str(hd)
head(hd)
str(gii)
head(gii)
class(hd)
class(gii)
names(hd)
library(plyr)
rename(hd, c("HDI.Rank"="rank", "Country"="country"))
names(hd)
rename(hd, c("HDI.Rank"="rank", "Country"="country"))
hd
hd
str(hd)
?rename
rename(hd, replace = c("HDI.Rank"="rank", "Country"="country"))
hd <- rename(hd, replace = c("HDI.Rank"="rank", "Country"="country"))
(hd)
hd <- rename(hd, replace = c("HDI.Rank"="rank", "Country"="country", "Human.Development.Index..HDI" = "hdi_index", "Life.Expectancy.at.Birth" = "life_exp",
"Expected.Years.of.Education" = "edu_year"))
hd <- read.csv("http://s3.amazonaws.com/assets.datacamp.com/production/course_2218/datasets/human_development.csv", stringsAsFactors = F)
hd <- rename(hd, replace = c("HDI.Rank"="rank", "Country"="country", "Human.Development.Index..HDI" = "hdi_index", "Life.Expectancy.at.Birth" = "life_exp",
"Expected.Years.of.Education" = "edu_year"))
hd <- rename(hd, replace = c("HDI.Rank"="rank", "Country"="country", "Human.Development.Index..HDI." = "hdi_index", "Life.Expectancy.at.Birth" = "life_exp",
"Expected.Years.of.Education" = "edu_year"))
hd <- read.csv("http://s3.amazonaws.com/assets.datacamp.com/production/course_2218/datasets/human_development.csv", stringsAsFactors = F)
hd <- rename(hd, replace = c("HDI.Rank"="rank", "Country"="country", "Human.Development.Index..HDI." = "hdi_index", "Life.Expectancy.at.Birth" = "life_exp",
"Expected.Years.of.Education" = "exp_edu_year", "Mean.Years.of.Education" = "mean_year_edu",
"Gross.National.Income..GNI..per.Capita" = "gni_pc", "GNI.per.Capita.Rank.Minus.HDI.Rank" = "gni_pc_min_hdi"))
View(hd)
str(gii)
gii <- rename(gii, replace = c("GII.Rank" = "rank", "Country"="country", "Gender.Inequality.Index..GII." = "gii_index",
"Maternal.Mortality.Ratio" = "mat_mor_ratio", "Adolescent.Birth.Rate" = "adol_birrate",
"Percent.Representation.in.Parliament" = "repr_parl", "Population.with.Secondary.Education..Female." = "sec_edu_fml",
"Population.with.Secondary.Education..Male." = "sec_edu_male", "Labour.Force.Participation.Rate..Female." = "lab_force_fml",
"Labour.Force.Participation.Rate..Male." = "lab_force_male"))
?mutate
hd <- mutate(gii, new = 1)
hd <- mutate(gii, new = -rank)
gii <- mutate(gii, new = -rank)
str(gii)
gii <- mutate(gii, gender_edu_ratio_ = sec_edu_fml / sec_edu_male)
gii <- mutate(gii, gender_edu_ratio = sec_edu_fml / sec_edu_male)
library(plyr)
hd <- read.csv("http://s3.amazonaws.com/assets.datacamp.com/production/course_2218/datasets/human_development.csv", stringsAsFactors = F)
gii <- read.csv("http://s3.amazonaws.com/assets.datacamp.com/production/course_2218/datasets/gender_inequality.csv", stringsAsFactors = F, na.strings = "..")
str(hd)
head(hd)
#Dataset hd (Human Development Index) has 195 observations in eight variables.
#After rank, country and index value there variables that are used to calculate HDI-index
str(gii)
head(gii)
#Dataset gii (Gender Development Index) has 195 observations in ten variables. The logic seems to be same than in hd: there is index and variables
#that have been used to calculate index.
#################
#Renaming columns
hd <- rename(hd, replace = c("HDI.Rank"="rank", "Country"="country", "Human.Development.Index..HDI." = "hdi_index", "Life.Expectancy.at.Birth" = "life_exp",
"Expected.Years.of.Education" = "exp_edu_year", "Mean.Years.of.Education" = "mean_year_edu",
"Gross.National.Income..GNI..per.Capita" = "gni_pc", "GNI.per.Capita.Rank.Minus.HDI.Rank" = "gni_pc_min_hdi"))
gii <- rename(gii, replace = c("GII.Rank" = "rank", "Country"="country", "Gender.Inequality.Index..GII." = "gii_index",
"Maternal.Mortality.Ratio" = "mat_mor_ratio", "Adolescent.Birth.Rate" = "adol_birrate",
"Percent.Representation.in.Parliament" = "repr_parl", "Population.with.Secondary.Education..Female." = "sec_edu_fml",
"Population.with.Secondary.Education..Male." = "sec_edu_male", "Labour.Force.Participation.Rate..Female." = "lab_force_fml",
"Labour.Force.Participation.Rate..Male." = "lab_force_male"))
########
#Mutate
gii <- mutate(gii, gender_edu_ratio = sec_edu_fml / sec_edu_male)
gii <- mutate(gii, gender_lab_ratio = lab_force_fml / lab_force_male)
?merge
human <- merge(gii, hd, by.x = "country", by.y = "country")
(human, replace = c("rank.x" = "hdi_rank", "rank.y" = "rank_gii"))
human <- rename(human, replace = c("rank.x" = "hdi_rank", "rank.y" = "rank_gii"))
setwd("C:/Users/Tuukka/Desktop/IODS-project/data")
write.csv(student_merged, file="humandata.csv")
library(plyr)
hd <- read.csv("http://s3.amazonaws.com/assets.datacamp.com/production/course_2218/datasets/human_development.csv", stringsAsFactors = F)
gii <- read.csv("http://s3.amazonaws.com/assets.datacamp.com/production/course_2218/datasets/gender_inequality.csv", stringsAsFactors = F, na.strings = "..")
str(hd)
head(hd)
#Dataset hd (Human Development Index) has 195 observations in eight variables.
#After rank, country and index value there variables that are used to calculate HDI-index
str(gii)
head(gii)
#Dataset gii (Gender Development Index) has 195 observations in ten variables. The logic seems to be same than in hd: there is index and variables
#that have been used to calculate index.
#################
#Renaming columns
hd <- rename(hd, replace = c("HDI.Rank"="rank", "Country"="country", "Human.Development.Index..HDI." = "hdi_index", "Life.Expectancy.at.Birth" = "life_exp",
"Expected.Years.of.Education" = "exp_edu_year", "Mean.Years.of.Education" = "mean_year_edu",
"Gross.National.Income..GNI..per.Capita" = "gni_pc", "GNI.per.Capita.Rank.Minus.HDI.Rank" = "gni_pc_min_hdi"))
gii <- rename(gii, replace = c("GII.Rank" = "rank", "Country"="country", "Gender.Inequality.Index..GII." = "gii_index",
"Maternal.Mortality.Ratio" = "mat_mor_ratio", "Adolescent.Birth.Rate" = "adol_birrate",
"Percent.Representation.in.Parliament" = "repr_parl", "Population.with.Secondary.Education..Female." = "sec_edu_fml",
"Population.with.Secondary.Education..Male." = "sec_edu_male", "Labour.Force.Participation.Rate..Female." = "lab_force_fml",
"Labour.Force.Participation.Rate..Male." = "lab_force_male"))
########
#Mutate
gii <- mutate(gii, gender_edu_ratio = sec_edu_fml / sec_edu_male)
gii <- mutate(gii, gender_lab_ratio = lab_force_fml / lab_force_male)
##################
#Joining data sets
human <- merge(gii, hd, by.x = "country", by.y = "country")
human <- rename(human, replace = c("rank.x" = "hdi_rank", "rank.y" = "rank_gii"))
setwd("C:/Users/Tuukka/Desktop/IODS-project/data")
write.csv(human, file="humandata.csv")
